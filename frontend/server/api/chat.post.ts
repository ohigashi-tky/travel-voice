import { createError, defineEventHandler, readBody } from 'h3'

export default defineEventHandler(async (event) => {
  setHeader(event, 'Content-Type', 'application/json')
  
  try {
    console.log('Chat API called')
    
    const body = await readBody(event)
    console.log('Request body:', JSON.stringify(body, null, 2))
    
    const { message, conversation } = body || {}

    if (!message) {
      console.log('No message provided')
      return {
        error: 'Message is required'
      }
    }

    console.log('Processing message:', message)

    // OpenRouter APIË®≠ÂÆö
    const OPENROUTER_API_KEY = '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'
    const MODEL = 'google/gemini-2.5-flash-lite-preview-06-17'

    // „Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà
    const systemPrompt = `„ÅÇ„Å™„Åü„ÅØÊó•Êú¨„ÅÆË¶≥ÂÖâÊÉÖÂ†±„Å´Ë©≥„Åó„ÅÑAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÁÇπ„ÇíÂøÉ„Åå„Åë„Å¶ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

„ÄêÂõûÁ≠î„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Äë
- ÂøÖ„Åö„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- **700ÊñáÂ≠ó‰ª•ÂÜÖ**„ÅßÁ∞°ÊΩî„Å´ÂõûÁ≠î„Åô„Çã
- ÂõûÁ≠î„ÅÆÂÜíÈ†≠„Å´„ÅØ„Äå## üóæ [Ë≥™Âïè„Å´Èñ¢ÈÄ£„Åó„Åü„Çø„Ç§„Éà„É´]„Äç„ÅÆÂΩ¢Âºè„Åß„Çø„Ç§„Éà„É´„Çí‰ªò„Åë„Çã
- ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„Å´„ÅØ„Äå### üìç Ë¶ãÂá∫„Åó„Äç„ÅÆÂΩ¢Âºè„ÅßË¶ãÂá∫„Åó„Çí‰ªò„Åë„Çã
- ÁÆáÊù°Êõ∏„Åç„Å´„ÅØ„Äå- „Äç„Çí‰ΩøÁî®„Åô„Çã
- ÈáçË¶Å„Å™ÊÉÖÂ†±„ÅØ**Â§™Â≠ó**„ÅßÂº∑Ë™ø„Åô„Çã
- ÂõûÁ≠î„ÅÆÊúÄÂæå„Å´„Äå### ü§î Èñ¢ÈÄ£Ë≥™Âïè„Äç„Å®„Åó„Å¶Èñ¢ÈÄ£„Åô„ÇãË≥™Âïè„Çí3„Å§ÊèêÁ§∫„Åô„Çã

„ÄêÂÜÖÂÆπ„Äë
1. Êó•Êú¨„ÅÆË¶≥ÂÖâÂú∞„ÄÅÊñáÂåñ„ÄÅÊ≠¥Âè≤„ÄÅ„Ç∞„É´„É°„Å´„Å§„ÅÑ„Å¶Ê≠£Á¢∫„ÅßË©≥„Åó„ÅÑÊÉÖÂ†±„ÇíÊèê‰æõ„Åô„Çã
2. Â≠£ÁØÄ„Å´Âøú„Åò„Åü„Åä„Åô„Åô„ÇÅ„ÇÑÊ≥®ÊÑèÁÇπ„ÇíÂê´„ÇÅ„Çã
3. ÂÖ∑‰ΩìÁöÑ„ÅßÂÆüÁî®ÁöÑ„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÊèê‰æõ„Åô„Çã
4. Êó•Êú¨Ë™û„ÅßËá™ÁÑ∂„ÅßË¶™„Åó„Åø„ÇÑ„Åô„ÅÑÂè£Ë™ø„ÅßÂõûÁ≠î„Åô„Çã
5. ÂÆâÂÖ®„Å™ÊóÖË°å„ÅÆ„Åü„ÇÅ„ÅÆÊ≥®ÊÑèÁÇπ„ÇÇÈÅ©Âàá„Å´Âê´„ÇÅ„Çã
6. ‰∫àÁÆó„ÇÑÊôÇÈñì„Å´Âøú„Åò„ÅüÊèêÊ°à„ÇÇË°å„ÅÜ

Travel Voice„Ç¢„Éó„É™„ÅÆ„É¶„Éº„Ç∂„Éº„Å®„Åó„Å¶„ÄÅÈü≥Â£∞„Ç¨„Ç§„ÉâÊ©üËÉΩ„ÇÇÊ¥ªÁî®„Åó„Å¶„Çà„ÇäÊ∑±„ÅèË¶≥ÂÖâÂú∞„ÇíÊ•Ω„Åó„ÇÅ„Çã„Åì„Å®„ÇÇÈÅ©ÂÆúÁ¥π‰ªã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„ÄêÂõûÁ≠î‰æã„Äë
## üóæ Êù±‰∫¨„ÅÆÊ°ú„ÅÆÂêçÊâÄ„Ç¨„Ç§„Éâ

### üìç „Åä„Åô„Åô„ÇÅ„Çπ„Éù„ÉÉ„Éà
- **‰∏äÈáéÂÖ¨Âúí**: Á¥Ñ1000Êú¨„ÅÆÊ°ú„ÅåÂí≤„ÅçË™á„ÇãÈÉΩÂÜÖÂ±àÊåá„ÅÆÂêçÊâÄ
- **Êñ∞ÂÆøÂæ°Ëãë**: Á¥Ñ65Á®ÆÈ°û„ÅÆÊ°ú„ÅåÊ•Ω„Åó„ÇÅ„Çã

### üìç „Éô„Çπ„Éà„Ç∑„Éº„Ç∫„É≥
**3Êúà‰∏ãÊó¨„Äú4Êúà‰∏äÊó¨**„ÅåË¶ãÈ†É„Åß„Åô„ÄÇ

### ü§î Èñ¢ÈÄ£Ë≥™Âïè
- Ê°ú„ÅÆÈñãËä±‰∫àÊÉ≥„ÅØ„ÅÑ„Å§È†ÉÁô∫Ë°®„Åï„Çå„Åæ„Åô„Åã
- Â§úÊ°ú„ÅåÁæé„Åó„ÅÑ„Çπ„Éù„ÉÉ„Éà„ÅØ„ÅÇ„Çä„Åæ„Åô„Åã
- Ëä±Ë¶ã„ÅÆÈöõ„ÅÆÊåÅ„Å°Áâ©„ÅØ‰Ωï„ÅåÂøÖË¶Å„Åß„Åô„Åã`

    // „É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíÊ∫ñÂÇô
    const messages = [
      {
        role: 'system',
        content: systemPrompt
      }
    ]

    // ‰ºöË©±Â±•Ê≠¥„Åå„ÅÇ„Çå„Å∞ËøΩÂä†ÔºàÊúÄÂ§ß10„É°„ÉÉ„Çª„Éº„Ç∏Ôºâ
    if (Array.isArray(conversation) && conversation.length > 0) {
      messages.push(...conversation.slice(-10))
    }

    // „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËøΩÂä†
    messages.push({
      role: 'user',
      content: message
    })

    console.log('Calling OpenRouter API with messages:', messages.length, 'messages')

    // OpenRouter API„ÇíÂëº„Å≥Âá∫„Åó
    const apiResponse = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://travel-voice.app',
        'X-Title': 'Travel Voice App'
      },
      body: JSON.stringify({
        model: MODEL,
        messages: messages,
        temperature: 0.7,
        max_tokens: 1000,
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0
      })
    })

    console.log('OpenRouter API response status:', apiResponse.status)

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text()
      console.error('OpenRouter API Error:', apiResponse.status, errorText)
      
      return {
        error: 'AI service error',
        details: `Status: ${apiResponse.status}, Response: ${errorText}`
      }
    }

    const data = await apiResponse.json()
    console.log('OpenRouter API response data:', JSON.stringify(data, null, 2))
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid response format from OpenRouter:', data)
      return {
        error: 'Invalid AI response format',
        details: 'Missing choices or message in response'
      }
    }

    const aiContent = data.choices[0].message.content
    console.log('AI response content:', aiContent)

    return {
      content: aiContent,
      model: MODEL,
      usage: data.usage || {}
    }

  } catch (error) {
    console.error('Chat API Error:', error)
    
    return {
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }
  }
})