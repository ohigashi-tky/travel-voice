import { createError, defineEventHandler, readBody } from 'h3'

export default defineEventHandler(async (event) => {
  setHeader(event, 'Content-Type', 'application/json')
  
  try {
    console.log('Chat API called')
    
    const body = await readBody(event)
    console.log('Request body:', JSON.stringify(body, null, 2))
    
    const { message, conversation } = body || {}

    if (!message) {
      console.log('No message provided')
      return {
        error: 'Message is required'
      }
    }

    console.log('Processing message:', message)

    // OpenRouter APIË®≠ÂÆö
    const OPENROUTER_API_KEY = process.env.NUXT_OPENROUTER_API_KEY || process.env.OPENROUTER_API_KEY
    const OPENROUTER_API_URL = process.env.OPENROUTER_API_URL || 'https://openrouter.ai/api/v1/chat/completions'
    const MODEL = process.env.NUXT_OPENROUTER_MODEL || process.env.OPENROUTER_MODEL || 'google/gemini-2.5-flash-lite-preview-06-17'

    if (!OPENROUTER_API_KEY) {
      console.error('OPENROUTER_API_KEY is not set')
      return {
        error: 'API„Ç≠„Éº„Ç®„É©„Éº',
        details: 'OpenRouter„ÅÆAPI„Ç≠„Éº„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇÁí∞Â¢ÉÂ§âÊï∞OPENROUTER_API_KEY„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
      }
    }

    // ‰ºöË©±Â±•Ê≠¥„Åã„ÇâÊñáËÑàÊÉÖÂ†±„ÇíÊäΩÂá∫
    let contextInfo = ''
    if (Array.isArray(conversation) && conversation.length > 0) {
      const recentMessages = conversation.slice(-4) // ÊúÄÊñ∞4„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁ¢∫Ë™ç
      const assistantMessages = recentMessages.filter(msg => msg.role === 'assistant')
      
      if (assistantMessages.length > 0) {
        const lastAssistantMessage = assistantMessages[assistantMessages.length - 1]
        if (lastAssistantMessage && lastAssistantMessage.content) {
          // ÂâçÂõû„ÅÆÂõûÁ≠î„Åã„ÇâË¶≥ÂÖâÂú∞Âêç„ÄÅÂú∞Âêç„ÄÅÊñΩË®≠Âêç„ÇíÊäΩÂá∫
          const locationMatches = lastAssistantMessage.content.match(/[„ÅÅ-„Çì‰∏Ä-ÈæØ„Éº]+[Âüé|ÂØ∫|Á•ûÁ§æ|ÂÖ¨Âúí|ÈßÖ|Ê©ã|Â±±|Â≥∂|Êπñ|Â∑ù|ÈÄö„Çä|Ë°ó|Âå∫|Â∏Ç|Â∫ú|Áúå|„Çø„ÉØ„Éº|ÁæéË°ìÈ§®|ÂçöÁâ©È§®|Ê∞¥ÊóèÈ§®|ÂãïÁâ©Âúí]/g)
          const locationNames = locationMatches ? [...new Set(locationMatches)] : []
          
          if (locationNames.length > 0) {
            contextInfo = `\n„ÄêÂâçÂõû„ÅÆÂõûÁ≠î„ÅßË®ÄÂèä„Åó„ÅüÂ†¥ÊâÄ„Äë: ${locationNames.join('„ÄÅ')}`
            console.log('Extracted locations from previous response:', locationNames)
          }
        }
      }
    }

    // „Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà
    const systemPrompt = `„ÅÇ„Å™„Åü„ÅØÊó•Êú¨„ÅÆË¶≥ÂÖâÊÉÖÂ†±„Å´Ë©≥„Åó„ÅÑAI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÁÇπ„ÇíÂøÉ„Åå„Åë„Å¶ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

„ÄêÈáçË¶Å„ÄëÈñ¢ÈÄ£Ë≥™Âïè„Åß„ÅØ„Äå„Åì„ÅÆÂ†¥ÊâÄ„Äç„Äå„Åì„Åì„Äç„Äå„Åù„Åì„Äç„Å™„Å©„ÅÆÊåáÁ§∫Ë™û„ÅØÁµ∂ÂØæ„Å´‰ΩøÁî®„Åõ„Åö„ÄÅÂøÖ„ÅöÂÖ∑‰ΩìÁöÑ„Å™Â†¥ÊâÄÂêç„ÉªÊñΩË®≠Âêç„ÇíÊòéË®ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ${contextInfo}

„ÄêÂõûÁ≠î„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Äë
- ÂøÖ„Åö„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- **700ÊñáÂ≠ó‰ª•ÂÜÖ**„ÅßÁ∞°ÊΩî„Å´ÂõûÁ≠î„Åô„Çã
- ÂõûÁ≠î„ÅÆÂÜíÈ†≠„Å´„ÅØ„Äå## üóæ [Ë≥™Âïè„Å´Èñ¢ÈÄ£„Åó„Åü„Çø„Ç§„Éà„É´]„Äç„ÅÆÂΩ¢Âºè„Åß„Çø„Ç§„Éà„É´„Çí‰ªò„Åë„Çã
- ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„Å´„ÅØ„Äå### üìç Ë¶ãÂá∫„Åó„Äç„ÅÆÂΩ¢Âºè„ÅßË¶ãÂá∫„Åó„Çí‰ªò„Åë„Çã
- ÁÆáÊù°Êõ∏„Åç„Å´„ÅØ„Äå- „Äç„Çí‰ΩøÁî®„Åô„Çã
- ÈáçË¶Å„Å™ÊÉÖÂ†±„ÅØ**Â§™Â≠ó**„ÅßÂº∑Ë™ø„Åô„Çã
- ÂõûÁ≠î„ÅÆÊúÄÂæå„Å´„Äå### ü§î Èñ¢ÈÄ£Ë≥™Âïè„Äç„Å®„Åó„Å¶„ÄÅ**‰ªäÂõû„ÅÆÂõûÁ≠îÂÜÖÂÆπ„Å´Áõ¥Êé•Èñ¢ÈÄ£„Åó„ÅüÂÖ∑‰ΩìÁöÑ„ÅßÂÆüÁî®ÁöÑ„Å™Ë≥™Âïè„Çí3„Å§**ÊèêÁ§∫„Åô„Çã
- **Èñ¢ÈÄ£Ë≥™Âïè„Åß„ÅØ„Äå„Åì„ÅÆÂ†¥ÊâÄ„Äç„Äå„Åì„Åì„Äç„Äå„Åù„Åì„Äç„Å™„Å©„ÅÆÊåáÁ§∫Ë™û„ÅØÁµ∂ÂØæ„Å´‰Ωø„Çè„Åö„ÄÅÂøÖ„ÅöÂÖ∑‰ΩìÁöÑ„Å™Â†¥ÊâÄÂêç„ÉªÊñΩË®≠Âêç„ÉªÊñôÁêÜÂêç„ÇíÊòéË®ò„Åô„Çã**

„ÄêÈñ¢ÈÄ£Ë≥™Âïè„ÅÆ‰Ωú„ÇäÊñπ„Äë
- **‰ªäÂõû„ÅÆÂõûÁ≠î„ÅßË®ÄÂèä„Åó„ÅüÂÖ∑‰ΩìÁöÑ„Å™Â†¥ÊâÄÂêç„ÉªÊñΩË®≠Âêç„ÇíÂøÖ„Åö‰ΩøÁî®„Åô„Çã**
- **Ë§áÊï∞„ÅÆÂ†¥ÊâÄ„ÇíÁ¥π‰ªã„Åó„ÅüÂ†¥Âêà**: „Äå‰∏äÈáéÂÖ¨Âúí„ÅÆÂñ∂Ê•≠ÊôÇÈñì„ÅØÔºü„Äç„ÄåÊñ∞ÂÆøÂæ°Ëãë„Å∏„ÅÆ„Ç¢„ÇØ„Çª„ÇπÊñπÊ≥ï„ÅØÔºü„Äç„Å™„Å©„ÄÅ**ÂÖ∑‰ΩìÁöÑ„Å™Â†¥ÊâÄÂêç„ÇíÂê´„ÇÅ„ÅüË≥™Âïè**„Å´„Åô„Çã
- **Âçò‰∏Ä„ÅÆÂ†¥ÊâÄ„ÇíÁ¥π‰ªã„Åó„ÅüÂ†¥Âêà**: „Åù„ÅÆÂ†¥ÊâÄ„ÅÆË©≥Á¥∞ÊÉÖÂ†±ÔºàÂñ∂Ê•≠ÊôÇÈñì„ÄÅÊñôÈáë„ÄÅ„Ç¢„ÇØ„Çª„Çπ„ÄÅÊ∑∑ÈõëÁä∂Ê≥Å„Å™„Å©Ôºâ
- **„Ç∞„É´„É°„ÇíÁ¥π‰ªã„Åó„ÅüÂ†¥Âêà**: „Äå‚óã‚óã„ÅßÈ£ü„Åπ„Çâ„Çå„Çã„ÅäÂ∫ó„ÅØ„Å©„Åì„Åß„Åô„ÅãÔºü„Äç„Å™„Å©„ÄÅ**ÂÖ∑‰ΩìÁöÑ„Å™ÊñôÁêÜÂêç„ÇÑÂ∫óÂêç„ÇíÂê´„ÇÅ„Çã**
- **Â≠£ÁØÄ„ÅÆÊÉÖÂ†±„ÇíÂê´„ÇÄÂ†¥Âêà**: „Åù„ÅÆÂ≠£ÁØÄ„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Ê•Ω„Åó„ÅøÊñπ„ÇÑÊ≥®ÊÑèÁÇπ
- **‰∫àÁÆó„ÉªÊôÇÈñì„Å´Ë®ÄÂèä„Åó„ÅüÂ†¥Âêà**: „Çà„ÇäË©≥„Åó„ÅÑË≤ªÁî®ÂÜÖË®≥„ÇÑÊâÄË¶ÅÊôÇÈñì„ÅÆË≥™Âïè
- **‰ºöË©±„ÅÆÊµÅ„Çå„ÇíËÄÉÊÖÆ**: ÂâçÂõûË®ÄÂèä„Åó„ÅüÂ†¥ÊâÄ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„Çå„Çâ„ÅÆÂ†¥ÊâÄÂêç„ÇíÂÑ™ÂÖàÁöÑ„Å´‰ΩøÁî®„Åô„Çã
- **„Äå„Åì„ÅÆÂ†¥ÊâÄ„Äç„Äå„Åì„Åì„Äç„Äå„Åù„Åì„Äç„Äå„Åù„ÅÆÂ†¥ÊâÄ„Äç„Äå„Ç¢„ÇØ„Çª„ÇπÊñπÊ≥ï„Äç„Å™„Å©ÊõñÊòß„Å™Ë°®Áèæ„ÅØÁµ∂ÂØæ„Å´‰ΩøÁî®Á¶ÅÊ≠¢**
- **ÂøÖ„Åö„Äå‚óã‚óãÈßÖ„ÅÆ„Äç„Äå‚ñ≥‚ñ≥ÂÖ¨Âúí„ÅÆ„Äç„Äå√ó√óÂØ∫„ÅÆ„Äç„Å™„Å©ÂÖ∑‰ΩìÁöÑ„Å™Âõ∫ÊúâÂêçË©û„ÇíÂê´„ÇÅ„Çã**
- Èñ¢ÈÄ£Ë≥™Âïè„ÅÆ‰æãÔºö‚ùå„Äå„Åì„ÅÆÂ†¥ÊâÄ„ÅÆÂñ∂Ê•≠ÊôÇÈñì„ÅØÔºü„Äç‚Üí ‚úÖ„ÄåÊ∏ÖÊ∞¥ÂØ∫„ÅÆÊãùË¶≥ÊôÇÈñì„ÅØÔºü„Äç

„ÄêÂÜÖÂÆπ„Äë
1. Êó•Êú¨„ÅÆË¶≥ÂÖâÂú∞„ÄÅÊñáÂåñ„ÄÅÊ≠¥Âè≤„ÄÅ„Ç∞„É´„É°„Å´„Å§„ÅÑ„Å¶Ê≠£Á¢∫„ÅßË©≥„Åó„ÅÑÊÉÖÂ†±„ÇíÊèê‰æõ„Åô„Çã
2. Â≠£ÁØÄ„Å´Âøú„Åò„Åü„Åä„Åô„Åô„ÇÅ„ÇÑÊ≥®ÊÑèÁÇπ„ÇíÂê´„ÇÅ„Çã
3. ÂÖ∑‰ΩìÁöÑ„ÅßÂÆüÁî®ÁöÑ„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÊèê‰æõ„Åô„Çã
4. Êó•Êú¨Ë™û„ÅßËá™ÁÑ∂„ÅßË¶™„Åó„Åø„ÇÑ„Åô„ÅÑÂè£Ë™ø„ÅßÂõûÁ≠î„Åô„Çã
5. ÂÆâÂÖ®„Å™ÊóÖË°å„ÅÆ„Åü„ÇÅ„ÅÆÊ≥®ÊÑèÁÇπ„ÇÇÈÅ©Âàá„Å´Âê´„ÇÅ„Çã
6. ‰∫àÁÆó„ÇÑÊôÇÈñì„Å´Âøú„Åò„ÅüÊèêÊ°à„ÇÇË°å„ÅÜ

Travel Voice„Ç¢„Éó„É™„ÅÆ„É¶„Éº„Ç∂„Éº„Å®„Åó„Å¶„ÄÅÈü≥Â£∞„Ç¨„Ç§„ÉâÊ©üËÉΩ„ÇÇÊ¥ªÁî®„Åó„Å¶„Çà„ÇäÊ∑±„ÅèË¶≥ÂÖâÂú∞„ÇíÊ•Ω„Åó„ÇÅ„Çã„Åì„Å®„ÇÇÈÅ©ÂÆúÁ¥π‰ªã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„ÄêÂõûÁ≠î‰æã„Äë
## üóæ Êù±‰∫¨„ÅÆÊ°ú„ÅÆÂêçÊâÄ„Ç¨„Ç§„Éâ

### üìç „Åä„Åô„Åô„ÇÅ„Çπ„Éù„ÉÉ„Éà
- **‰∏äÈáéÂÖ¨Âúí**: Á¥Ñ1000Êú¨„ÅÆÊ°ú„ÅåÂí≤„ÅçË™á„ÇãÈÉΩÂÜÖÂ±àÊåá„ÅÆÂêçÊâÄ
- **Êñ∞ÂÆøÂæ°Ëãë**: Á¥Ñ65Á®ÆÈ°û„ÅÆÊ°ú„ÅåÊ•Ω„Åó„ÇÅ„Çã
- **ÂçÉÈ≥•„É∂Ê∑µ**: Â§úÊ°ú„É©„Ç§„Éà„Ç¢„ÉÉ„Éó„ÅåÁæé„Åó„ÅÑ

### üìç „Éô„Çπ„Éà„Ç∑„Éº„Ç∫„É≥
**3Êúà‰∏ãÊó¨„Äú4Êúà‰∏äÊó¨**„ÅåË¶ãÈ†É„Åß„Åô„ÄÇ

### ü§î Èñ¢ÈÄ£Ë≥™Âïè
- ‰∏äÈáéÂÖ¨Âúí„ÅÆËä±Ë¶ã„ÅßÂ†¥ÊâÄÂèñ„Çä„ÅÆ„Ç≥„ÉÑ„ÅØ„ÅÇ„Çä„Åæ„Åô„Åã
- Êñ∞ÂÆøÂæ°Ëãë„ÅÆÂÖ•ÂúíÊñô„Å®ÈñãÂúíÊôÇÈñì„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ  
- ÂçÉÈ≥•„É∂Ê∑µ„ÅÆÂ§úÊ°ú„É©„Ç§„Éà„Ç¢„ÉÉ„Éó„ÅØ‰ΩïÊôÇ„Åæ„Åß„Åß„Åô„Åã`

    // „É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíÊ∫ñÂÇô
    const messages = [
      {
        role: 'system',
        content: systemPrompt
      }
    ]

    // ‰ºöË©±Â±•Ê≠¥„Åå„ÅÇ„Çå„Å∞ËøΩÂä†ÔºàÊúÄÂ§ß10„É°„ÉÉ„Çª„Éº„Ç∏Ôºâ
    if (Array.isArray(conversation) && conversation.length > 0) {
      messages.push(...conversation.slice(-10))
    }

    // „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíËøΩÂä†
    messages.push({
      role: 'user',
      content: message
    })

    console.log('Calling OpenRouter API with messages:', messages.length, 'messages')

    // OpenRouter API„ÇíÂëº„Å≥Âá∫„Åó
    const apiResponse = await fetch(OPENROUTER_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://travel-voice.app',
        'X-Title': 'Travel Voice App'
      },
      body: JSON.stringify({
        model: MODEL,
        messages: messages,
        temperature: 0.7,
        max_tokens: 1000,
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0
      })
    })

    console.log('OpenRouter API response status:', apiResponse.status)

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text()
      console.error('OpenRouter API Error:', apiResponse.status, errorText)
      
      return {
        error: 'AI service error',
        details: `Status: ${apiResponse.status}, Response: ${errorText}`
      }
    }

    const data = await apiResponse.json()
    console.log('OpenRouter API response data:', JSON.stringify(data, null, 2))
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid response format from OpenRouter:', data)
      return {
        error: 'Invalid AI response format',
        details: 'Missing choices or message in response'
      }
    }

    const aiContent = data.choices[0].message.content
    // console.log('AI response content:', aiContent)

    return {
      content: aiContent,
      model: MODEL,
      usage: data.usage || {}
    }

  } catch (error) {
    console.error('Chat API Error:', error)
    
    return {
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }
  }
})